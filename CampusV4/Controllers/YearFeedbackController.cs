using System;
using System.Collections.Generic;
using System.Linq;
using C1.Web.Mvc;
using C1.Web.Mvc.Serialization;
using System.Web;
using System.Data;
using System.Web.Mvc;
using System.Data.Entity;
using CampusV4.Models;

// This code was generated by C1 Scaffolder.

namespace CampusV4.Controllers.YearFeedback
{
    public partial class YearFeedbackController : Controller
    {

        public ActionResult YearFeedback()
        {
            YearFeedbackViewModel model = new YearFeedbackViewModel();
            GetComboDataList(ref model);
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Print(YearFeedbackViewModel model)
        {

            YearFeedbackPrintViewModel modelPrint = new YearFeedbackPrintViewModel();
            GetPrintDataList(ref modelPrint);
            return View("YearFeedbackPrint", modelPrint);
        }

        //リストボックス値取得
        private void GetComboDataList(ref YearFeedbackViewModel model)
        {

            // 担当者情報を取得
            var TantoshaData = new List<EmployeeData>();
            TantoshaData.Add(new EmployeeData("　", ""));
            TantoshaData.Add(new EmployeeData("USR00001", "佐藤　一郎"));
            TantoshaData.Add(new EmployeeData("USR00002", "佐藤　次郎"));
            TantoshaData.Add(new EmployeeData("USR00003", "佐藤　三郎"));
            TantoshaData.Add(new EmployeeData("USR00004", "佐藤　四朗"));
            TantoshaData.Add(new EmployeeData("USR00005", "佐藤　五郎"));
            model.CommentInputDataList = TantoshaData;

            // 比較先を取得
            var ComparisonDataList = new List<MasterData>();
            ComparisonDataList.Add(new MasterData("　", ""));
            ComparisonDataList.Add(new MasterData("A", "ステータスA"));
            ComparisonDataList.Add(new MasterData("B", "ステータスB"));
            ComparisonDataList.Add(new MasterData("C", "ステータスC"));
            ComparisonDataList.Add(new MasterData("D", "ステータスD"));
            ComparisonDataList.Add(new MasterData("E", "ステータスE"));
            model.ComparisonDataList = ComparisonDataList;

        }

        //印刷画面データ取得
        private void GetPrintDataList(ref YearFeedbackPrintViewModel model)
        {
            //レーダーチャートデータ取得
            GetYearFeedbackRadarData(ref model);
            //年間フィードバックデータ取得
            GetYearFeedbackData(ref model);
            //取引履歴データ取得
            GetYearFeedbackTransactionHistory(ref model);
        }

        //レーダーチャートデータ取得
        private void GetYearFeedbackRadarData(ref YearFeedbackPrintViewModel model)
        {
            Random r = new Random();
            
            var colNames = "品質,対応,納期,短縮,費用,効率".Split(new char[] { ',' });
            var CompanyDataList = new List<MasterData>();
            CompanyDataList.Add(new MasterData("A001", "株式会社 A社"));
            CompanyDataList.Add(new MasterData("A002", "株式会社 B社"));
            CompanyDataList.Add(new MasterData("A003", "株式会社 C社"));

            List<YearFeedbackRadarData> YearFeedbackRadarList = new List<YearFeedbackRadarData>();
            for (var i = 0; i < colNames.Length; i++)
            {
                List<RadarValue> RadarValueList = new List<RadarValue>();
                for (var t = 0; t < CompanyDataList.Count; t++)
                {
                    RadarValue radarValue = new RadarValue();
                    radarValue.CompanyId = CompanyDataList[t].Code;
                    radarValue.CompanyName = CompanyDataList[t].Name;
                    radarValue.Value = r.Next(100);
                    RadarValueList.Add(radarValue);
                }
                YearFeedbackRadarList.Add(new YearFeedbackRadarData(colNames[i], RadarValueList));
            }
                
            model.RadarDataList = YearFeedbackRadarList;
        }

        //年間フィードバックデータ取得
        private void GetYearFeedbackData(ref YearFeedbackPrintViewModel model)
        {
            //対前年評価
            model.PreviousYearEvaluation = "Ａ";
            //対前々年評価
            model.TwoYearsBeforeEvaluation = "Ｅ";

            //評価年度の範囲From
            model.Evaluation_yymm_From = DateTime.Parse("2021/01/01");
            //評価年度の範囲To
            model.Evaluation_yymm_To = DateTime.Parse("2023/01/01");
            //総合評価ランク
            model.TotalEvaluationRank = "Ｅ";
            //総合評価
            model.TotalEvaluationName = "技術指導を要する";
            //順位
            model.Rank = "100";
            //コメント入力者名
            model.CommentInputName = "佐藤 一郎";
            //コメント
            model.Comment_Print = "コメントです" ;

            //提出件数（当年）
            model.FilingNum_CurrentYear = 3000;
            //不採用件数（当年）
            model.NotAdopted_CurrentYear = 1000;
            //採用件数（当年）
            model.AdoptionNum_CurrentYear = 1500;
            //対前年比（見積）
            model.PreviousYearRatioEstimate = 10;
            //対前々年比（見積）
            model.TwoYearsBeforeRatioEstimate = 20;

            //提出件数（前年）
            model.FilingNum_LastYear = 3000;
            //不採用件数（前年）
            model.NotAdopted_LastYear = 1000;
            //採用件数（前年）
            model.AdoptionNum_LastYear = 1500;

            //提出件数（前々年）
            model.FilingNum_TwoYearsBefore = 3000;
            //不採用件数（前々年）
            model.NotAdopted_TwoYearsBefore = 1000;
            //採用件数（前々年）
            model.AdoptionNum_TwoYearsBefore = 1500;

            //受注件数（当年）
            model.OrderNum_CurrentYear = 3000;
            //受注金額（当年）
            model.OrderPrice_CurrentYear = 1000;
            //受注件数（前年）
            model.OrderNum_LastYear = 3000;
            //受注金額（前年）
            model.OrderPrice_LastYear = 1000;
            //受注件数（前々年）
            model.OrderNum_TwoYearsBefore = 3000;
            //受注金額（前々年）
            model.OrderPrice_TwoYearsBefore = 1000;

            //対前年比（件数）（受注）
            model.PreviousYearRatioOrder_Number = 1500;
            //対前々年比（件数）（受注）
            model.TwoYearsBeforeRatioOrder_Number = 100;
            //対前年比（金額）（受注）
            model.PreviousYearRatioOrder_Price = 1500;
            //対前々年比（金額）（受注）
            model.TwoYearsBeforeRatioOrder_Price = 100;

        }

        //取引履歴データ取得
        private void GetYearFeedbackTransactionHistory(ref YearFeedbackPrintViewModel model)
        {
            List<YearFeedbackTransactionHistory> TransactionHistoryList = new List<YearFeedbackTransactionHistory>();
            TransactionHistoryList.Add(new YearFeedbackTransactionHistory("見積","2020/01","A", "Upper Main Cavity",1,100,200));
            TransactionHistoryList.Add(new YearFeedbackTransactionHistory("見積", "2021/01", "A", "Upper Main Cavity", 1, 200, 300));
            TransactionHistoryList.Add(new YearFeedbackTransactionHistory("受注", "2021/01", "A", "Upper Main Cavity", 1, 200, 300));
            model.TransactionHistoryList = TransactionHistoryList;
        }
    }
}