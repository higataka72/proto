using System;
using System.Collections.Generic;
using System.Linq;
using C1.Web.Mvc;
using C1.Web.Mvc.Serialization;
using System.Data;
using System.Web;
using System.Web.Mvc;
using CampusV4.Models;

// This code was generated by C1 Scaffolder.

namespace CampusV4.Controllers
{
    public class ReferenceEstimateController : Controller
    {
        //主画面表示
        public ActionResult ReferenceEstimate()
        {
            ReferenceEstimateViewModel model = new ReferenceEstimateViewModel();
            GetComboDataListReferenceEstimate(ref model);
            GetToolttipListReferenceEstimate(ref model);
            model.PkgSize = 0;
            model.PkgNumRow = 0;
            model.PkgNumCol = 0;
            model.FreamSizeHight = 0;
            model.FreamSizeWidth = 0;
            model.MountingDeviceCode = 0;
            model.TabletSize = 0;
            model.TypeNum = 0;

            return View(model);
        }

        //主画面　次へボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ReferenceEstimateNext(ReferenceEstimateViewModel model)
        {

            ProductionAddInfoViewModel modelProductionAddInfo = new ProductionAddInfoViewModel();
            GetComboDataListProductionAddInfo(ref modelProductionAddInfo);
            GetOptionDataList(ref modelProductionAddInfo);
            GetTooltipProductionAddInfo(ref modelProductionAddInfo);

            return View("ProductionAddInfo", modelProductionAddInfo);
        }

        //生産追加情報　戻るボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ProductionAddInfoBack(ProductionAddInfoViewModel model)
        {

            ReferenceEstimateViewModel modelReferenceEstimate = new ReferenceEstimateViewModel();
            GetComboDataListReferenceEstimate(ref modelReferenceEstimate);
            GetToolttipListReferenceEstimate(ref modelReferenceEstimate);
            return View("ReferenceEstimate", modelReferenceEstimate);
        }

        //生産追加情報画面　次へボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ProductionAddInfoBackNext(ProductionAddInfoViewModel model)
        {

            ReferenceEstimatePriceViewModel modelReferenceEstimatePrice = new ReferenceEstimatePriceViewModel();
            modelReferenceEstimatePrice.ApproximatePriceFrom = 0;
            modelReferenceEstimatePrice.ApproximatePriceTo = 0;

            return View("ReferenceEstimatePrice", modelReferenceEstimatePrice);
        }

        //参考見積画面　戻るへボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ReferenceEstimatePriceBack(ReferenceEstimatePriceViewModel model)
        {

            ProductionAddInfoViewModel modelProductionAddInfo = new ProductionAddInfoViewModel();
            GetComboDataListProductionAddInfo(ref modelProductionAddInfo);
            GetOptionDataList(ref modelProductionAddInfo);
            GetTooltipProductionAddInfo(ref modelProductionAddInfo);

            return View("ProductionAddInfo", modelProductionAddInfo);

        }

        //参考見積画面　終了へボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ReferenceEstimatePrice(ReferenceEstimatePriceViewModel model)
        {
            return View(model);
        }

        //参考見積画面　商談予約へボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CustomerBaseInfo(ReferenceEstimatePriceViewModel model)
        {

            CustomerBaseInfoViewModel modelCustomerBaseInfo = new CustomerBaseInfoViewModel();


            return View("CustomerBaseInfo", modelCustomerBaseInfo);
        }

        //お客様基本情報画面　戻るボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CustomerBaseInfoBack(CustomerBaseInfoViewModel model)
        {

            ReferenceEstimatePriceViewModel modelReferenceEstimatePrice = new ReferenceEstimatePriceViewModel();
            modelReferenceEstimatePrice.ApproximatePriceFrom = 0;
            modelReferenceEstimatePrice.ApproximatePriceTo = 0;

            return View("ReferenceEstimatePrice", modelReferenceEstimatePrice);
        }

        //お客様基本情報画面　次へボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CustomerBaseInfoNext(CustomerBaseInfoViewModel model)
        {

            DesiredInterviewViewModel modelDesiredInterview = new DesiredInterviewViewModel();
            GetComboDataListDesiredInterview(ref modelDesiredInterview);

            return View("DesiredInterview", modelDesiredInterview);
        }

        //面談日程画面　戻るボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DesiredInterviewBack(DesiredInterviewViewModel model)
        {

            CustomerBaseInfoViewModel modelCustomerBaseInfo = new CustomerBaseInfoViewModel();


            return View("CustomerBaseInfo", modelCustomerBaseInfo);
        }

        //面談日程画面　次へボタン
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DesiredInterview(DesiredInterviewViewModel model)
        {

            DesiredInterviewViewModel modelDesiredInterview = new DesiredInterviewViewModel();
            GetComboDataListDesiredInterview(ref modelDesiredInterview);

            return View(modelDesiredInterview);
        }


        //リストボックス値取得(主画面)
        private void GetComboDataListReferenceEstimate(ref ReferenceEstimateViewModel model)
        {

            // 品種を取得
            var HinshuDataList = new List<HinshuData>();
            HinshuDataList.Add(new HinshuData("ZX-A001", "金型A図枠組み"));
            HinshuDataList.Add(new HinshuData("ZX-B001", "金型B図枠組み"));
            HinshuDataList.Add(new HinshuData("ZX-C001", "金型C図枠組み"));
            HinshuDataList.Add(new HinshuData("ZX-D001", "金型D図枠組み"));
            HinshuDataList.Add(new HinshuData("ZX-E001", "金型E図枠組み"));
            HinshuDataList.Add(new HinshuData("ZX-F001", "金型F図枠組み"));
            HinshuDataList.Add(new HinshuData("ZX-G001", "金型G図枠組み"));
            model.HinsyuDataList = HinshuDataList;

            // 搭載装置を取得
            var VarietyDataList = new List<VarietyData>();
            VarietyDataList.Add(new VarietyData("　", ""));
            VarietyDataList.Add(new VarietyData("A", "搭載装置A"));
            VarietyDataList.Add(new VarietyData("B", "搭載装置B"));
            VarietyDataList.Add(new VarietyData("C", "搭載装置C"));
            VarietyDataList.Add(new VarietyData("D", "搭載装置D"));
            VarietyDataList.Add(new VarietyData("E", "搭載装置E"));
            model.VarietyDataList = VarietyDataList;

        }

        private void GetToolttipListReferenceEstimate(ref ReferenceEstimateViewModel model)
        {
            //品種コード　ツールチップ
            model.VarietyCodeTT = "品種　ツールチップ";
            //ＰＫＧサイズ　ツールチップ
            model.PkgSizeTT = "ＰＫＧサイズ　ツールチップ";
            //ＰＫＧ数　ツールチップ
            model.PkgNumTT = "ＰＫＧ数　ツールチップ";
            //フレームサイズ　ツールチップ
            model.FreamSizeTT = "フレームサイズ　ツールチップ";
            //搭載装置　ツールチップ
            model.MountingDeviceTT = "搭載装置　ツールチップ";
            //タブレットサイズ　ツールチップ
            model.TabletSizeTT = "タブレットサイズ　ツールチップ";
        }

        private void GetComboDataListProductionAddInfo(ref ProductionAddInfoViewModel model)
        {

            // ＣＡＶ材質を取得
            var VarietyDataList = new List<VarietyData>();
            VarietyDataList.Add(new VarietyData("　", ""));
            VarietyDataList.Add(new VarietyData("A", "ＣＡＶ材質A"));
            VarietyDataList.Add(new VarietyData("B", "ＣＡＶ材質B"));
            VarietyDataList.Add(new VarietyData("C", "ＣＡＶ材質C"));
            VarietyDataList.Add(new VarietyData("D", "ＣＡＶ材質D"));
            VarietyDataList.Add(new VarietyData("E", "ＣＡＶ材質E"));
            model.CavMaterialDataList = VarietyDataList;

            var VarietyDataList_SurfaceTreatment = new List<VarietyData>();
            VarietyDataList_SurfaceTreatment.Add(new VarietyData("　", ""));
            VarietyDataList_SurfaceTreatment.Add(new VarietyData("A", "表面処理A"));
            VarietyDataList_SurfaceTreatment.Add(new VarietyData("B", "表面処理B"));
            VarietyDataList_SurfaceTreatment.Add(new VarietyData("C", "表面処理C"));
            VarietyDataList_SurfaceTreatment.Add(new VarietyData("D", "表面処理D"));
            VarietyDataList_SurfaceTreatment.Add(new VarietyData("E", "表面処理E"));
            model.SurfaceTreatmentDataList = VarietyDataList_SurfaceTreatment;

        }

        private void GetTooltipProductionAddInfo(ref ProductionAddInfoViewModel model)
        {
            //ＣＡＶ材質 ツールチップ
            model.CavMaterialTT = "ＣＡＶ材質 ツールチップ";
            //表面処理 ツールチップ
            model.SurfaceTreatmentTT = "表面処理 ツールチップ";
        }
        private void GetOptionDataList(ref ProductionAddInfoViewModel model)
        {
            var OptionDataList = new List<OptionData>();
            OptionDataList.Add(new OptionData("A", false, "真空成型", "真空成型 ツールチップ"));
            OptionDataList.Add(new OptionData("B", false, "カルインサート", "カルインサート ツールチップ"));
            OptionDataList.Add(new OptionData("C", false, "基板吸着", "基板吸着 ツールチップ"));
            OptionDataList.Add(new OptionData("D", false, "ゲートインサート", "ゲートインサート ツールチップ"));
            OptionDataList.Add(new OptionData("E", false, "リリースフィルム", "リリースフィルム ツールチップ"));
            OptionDataList.Add(new OptionData("F", false, "テフロンリング", "テフロンリング ツールチップ"));
            OptionDataList.Add(new OptionData("G", false, "ソフトクランプ", "ソフトクランプ ツールチップ"));
            OptionDataList.Add(new OptionData("H", false, "イエブコ処理", "イエブコ処理 ツールチップ"));
            OptionDataList.Add(new OptionData("I", false, "エアベントシャッター", "エアベントシャッター ツールチップ"));

            model.OptionList = OptionDataList;
        }

        private void GetComboDataListDesiredInterview(ref DesiredInterviewViewModel model)
        {

            // 記号時間を取得
            var DesiredTimeList = new List<MasterData>();
            DesiredTimeList.Add(new MasterData("　", ""));
            DesiredTimeList.Add(new MasterData("A", "9:00～10:00"));
            DesiredTimeList.Add(new MasterData("B", "10:00～11:00"));
            DesiredTimeList.Add(new MasterData("C", "11:00～12:00"));
            DesiredTimeList.Add(new MasterData("D", "13:00～14:00"));
            DesiredTimeList.Add(new MasterData("E", "14:00～15:00"));
            DesiredTimeList.Add(new MasterData("E", "15:00～16:00"));
            DesiredTimeList.Add(new MasterData("E", "16:00～17:00"));
            DesiredTimeList.Add(new MasterData("E", "17:00～18:00"));
            model.DesiredTimeList = DesiredTimeList;

        }
    }
}