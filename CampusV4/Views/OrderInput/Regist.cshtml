@model CampusV4.Models.OrderInputViewModel

<div id="OrderInput">
    <div style="transform-origin: left top;">
        <div class="page-title">
            <div class="title_left">
                <ol class="breadcrumb">
                    <li class="active">発注入力</li>
                </ol>
            </div>
        </div>
        <div class="clearfix"></div>
        <div class="row">
            <div class="col-md-12">
                <div class="x_panel">
                    @using (Html.BeginForm("Regist", "OrderInput", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_Text3" for="Text3">製番</label>
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.Seiban, new { @class = "form-control", @id = "txtSeiban" })
                            </div>
                            <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_Text1" for="Text1">発注番号</label>
                            <div class="col-md-2">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.HatyuNo, new { @class = "form-control",  @id = "txtHatyuNo" })
                                    <span class="input-group-btn">
                                        <button type="button" class="btn btn-info" id="btnSearchHachu"><i class="fa fa-search"></i></button>
                                    </span>
                                </div>
                            </div>
                            <label class="col-md-1 control-label text-nowrap" id="lbl_Text16" for="Text16">発注日</label>
                            <div class="col-md-2">
                                @Html.C1().InputDate().Id("Text16").Value(Model.HatyuDate).Placeholder("(必須)")
                            </div>
                            <div class="col-md-2">
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(model => model.KariHatyuFlag)&emsp;仮発注
                                    </label>
                                </div>
                            </div>

                        </div>
                        <hr class="hr-custom1" />
                        <div class="form-group">
                            <label class="col-md-1 control-label text-nowrap" id="lbl_Text4" for="Text4">CAMPUS-ID</label>
                            <div class="col-md-2">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.CumpasId, new { @class = "form-control", @placeholder = "(必須)", @id = "txtCumpasId" })
                                    <span class="input-group-btn">
                                        <button type="button" class="btn btn-info" id="btnSearchCumpasid"><i class="fa fa-search"></i></button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.CumpasName, new { @class = "form-control", @placeholder = "(必須)", @id = "txtCumpasName" })
                            </div>
                            <div class="col-md-2">
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(model => model.SyanaiFlag)&emsp;社内発注
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-1 control-label text-nowrap" id="lbl_Text6" for="Text6">部署名</label>
                            <div class="col-md-3">
                                @Html.TextBoxFor(model => model.BusyoName, new { @class = "form-control", @id = "txtBusyoName" })
                            </div>
                            <label class="col-md-1 control-label text-nowrap" id="lbl_OrderManList" for="Select3">ご担当者様名</label>
                            <div class="col-md-3">
                                @(Html.C1().ComboBoxFor(model => model.OrderManListCode).Id("cmbDesignManList").Placeholder("(必須)")
                                .Bind(Model.oim_DesignManListData)
                                .DisplayMemberPath("Code")
                                .SelectedValuePath("Code")
                                .HeaderPath("Code")
                                .CssStyle( "width" , "auto" )
                                .SelectedValue(Model.DesignManListCode)
                                .IsRequired(false))
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-1 control-label text-nowrap" id="lbl_Text8" for="Text8">連絡先</label>
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.Address, new { @class = "form-control", @id = "txtAddress" })
                            </div>
                            <label class="col-md-offset-1 col-md-1 control-label text-nowrap" id="lbl_Text9" for="Text9">メールアドレス</label>
                            <div class="col-md-3">
                                @Html.TextBoxFor(model => model.MailAddress, new { @class = "form-control", @placeholder = "(必須)", @id = "txtMailAddress" })
                            </div>
                        </div>
                        <hr />
                        <div class="form-group">
                            <label class="col-md-1 control-label text-nowrap" id="lbl_OrderManList" for="Select3">発注担当者</label>
                            <div class="col-md-2">
                                @(Html.C1().ComboBoxFor(model => model.OrderManListCode).Id("cmbOrderManList").Placeholder("(必須)")
                                .Bind(Model.oim_OrderManListData)
                                .DisplayMemberPath("Code")
                                .SelectedValuePath("Code")
                                .HeaderPath("Code")
                                .CssStyle( "width" , "auto" )
                                .SelectedValue(Model.OrderManListCode)
                                .IsRequired(false))
                            </div>
                            <label class="col-md-1 control-label text-nowrap" id="lbl_Text18" for="Text18">稟議番号</label>
                            <div class="col-md-1">
                                @Html.TextBoxFor(model => model.RingiNo, new { @class = "form-control", @id = "txtRingiNo" })
                            </div>
                            <label class="col-md-1 control-label text-nowrap" id="lbl_Text19" for="Text19">不良伝票</label>
                            <div class="col-md-1">
                                @Html.TextBoxFor(model => model.FuryoDenpyoNo, new { @class = "form-control", @id = "txtFuryoDenpyoNo" })
                            </div>
                            <div class="col-md-1">
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(model => model.HatyuFlag)&emsp;注文書
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(model => model.GenpinFlag)&emsp;現品票
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-1 control-label text-nowrap" id="lbl_TextArea1" for="TextArea1">備考</label>
                            <div class="col-md-4">
                                <textarea class="form-control" id="TextArea1" name="TextArea1" style="height:100px"></textarea>
                            </div>
                            <label class="col-md-1 control-label text-nowrap" id="lbl_File1" for="file">依頼添付資料</label>
                            <div class="col-md-5">
                                <div class="dropzone dz-clickable" id="myDrop">
                                    <div class="dz-default dz-message" data-dz-message="">
                                        <span>ファイルをドラッグ＆ドロップしてしてください。<br>またはここをクリック(タップ)して選択してください。</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group"></div>
                        <div class="form-group">
                            @(Html.C1().FlexGrid()
                            .AutoGenerateColumns(false).IsReadOnly(false).Height("300px").Id("flexgrid").AllowAddNew(false)
                            .Bind(Model.oim_GridPartsDataList)
                            .Columns(b1 =>
                            {
                                b1.Add(cb => cb.Binding("RowNumber").Width("50").Header("行").WordWrap(true).DataType(DataType.Number).IsReadOnly(true).Align("center"));
                                b1.Add(cb => cb.Binding("PartsCode").Width("80").Header("部品分類").WordWrap(true).Align("center"));
                                b1.Add(cb => cb.Binding("PartsName").Width("180").Header("部品名").WordWrap(true));
                                b1.Add(cb => cb.Binding("DrawingNumber").Width("120").Header("図面番号/型式").WordWrap(true).Align("center"));
                                b1.Add(cb => cb.Binding("IriSu").Width("80").Header("入数").WordWrap(true).DataType(DataType.Number));
                                b1.Add(cb => cb.Binding("Quantity").Width("80").Header("個数").WordWrap(true).DataType(DataType.Number));
                                b1.Add(cb => cb.Binding("Suryo").Width("80").Header("数量").WordWrap(true).DataType(DataType.Number));
                                b1.Add(cb => cb.Binding("Unit").Width("80").Header("単位").WordWrap(true).DataType(DataType.Number).Align("center"));
                                b1.Add(cb => cb.Binding("SurfaceTreatment").Width("80").Header("表面処理").WordWrap(true).Align("center"));
                                b1.Add(cb => cb.Binding("SurfaceTreatmentName").Width("180").Header("表面処理").WordWrap(true));
                                b1.Add(cb => cb.Binding("Unitprice").Width("80").Header("単価").WordWrap(true).DataType(DataType.Number));
                                b1.Add(cb => cb.Binding("Price").Width("80").Header("金額").WordWrap(true).DataType(DataType.Number).Name("money"));
                                b1.Add(cb => cb.Binding("ShippingDate").Width("100").Header("納期").WordWrap(true).DataType(DataType.Date).Align("center"));
                                b1.Add(cb => cb.Binding("Remarks").Width("150").Header("備考").WordWrap(true));
                                b1.Add(cb => cb.Binding("Acceptance").Width("70").Header("検収"));
                            }))
                        </div>

                        <div class="ln_solid"></div>
                        <div class="form-group">
                            <div class="col-md-7 col-md-offset-3" style="text-align: right">
                                <a href="#" class="btn btn-primary">印刷</a>
                                <a href="#" class="btn btn-primary">メール送信</a>
                                @*<a href="#" class="btn btn-primary" id="btnInstallmentPayment">分納</a>*@
                                <input type="submit" class="btn btn-primary" value="登録">
                            </div>
                            <label class="col-md-2 control-label" for="Text17" style="text-align: left">
                                &emsp;@Html.RadioButtonFor(model => model.ApprovalType, "1") 承認　
                                @Html.RadioButtonFor(model => model.ApprovalType, "2") 否決
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@Html.Partial("InstallmentPayment")
@Html.Partial("PartsSelect", Model)
@Html.Partial("Change")
@Html.Partial("../Common/MasterSearch")

@section scripts{
    <script>
        Dropzone.autoDiscover = false;
        var myDropzone = new Dropzone("div#myDrop", {
            addRemoveLinks: true,
            dictCancelUpload: "キャンセル",
            dictCancelUploadConfirmation: "本当にアップロードしたファイルをキャンセルしますか？",
            dictRemoveFile: "削除",
            url: "/OrderInput/FileUpload",
            removedfile: function (file) {
                var name = file.name;
                $.ajax({
                    type: 'POST',
                    url: "/OrderInput/FileDelete",
                    data: { name: name },
                    success: function (data) {
                        console.log(data);
                    }
                });
                file.previewElement.remove();
            }
        });

        c1.documentReady(function () {
            // ラベルツールチップ設定
            var tt = new wijmo.Tooltip();
            tt.setTooltip('#lbl_Text1', '発注番号<br><b>F2:検索 F5:クリア F9:終了</b>');
            tt.setTooltip('#lbl_Text3', '製番<br><b>F1:削除 F5:クリア F9:終了</b>');

            var dlgInstallmentPayment = wijmo.Control.getControl('#dlgInstallmentPayment');
            /*var dlgPartsSelect = wijmo.Control.getControl('#dlgPartsSelect');*/
            var dlgChange = wijmo.Control.getControl('#dlgChange');
            var dlgMasterSearch = wijmo.Control.getControl('#dlgMasterSearch');
            var theGrid = wijmo.Control.getControl('#flexgrid');

            //new CustomGridEditor(theGrid, 'ShippingDate', wijmo.input.InputDate, {
            //    format: 'd'
            //});

            //document.getElementById('btnInstallmentPayment').addEventListener('click', function () {
            //    dlgInstallmentPayment.show(true, function (sender) {
            //        switch (sender.dialogResult) {
            //            case 'submit':
            //                alert('form submitted');
            //                break;
            //            case 'wj-hide-create':
            //                break;
            //        }
            //    });
            //});

            //document.getElementById('Text17').addEventListener('change', function () {
            //    dlgChange.show(true, function (sender) {
            //        switch (sender.dialogResult) {
            //            case 'submit':
            //                alert('form submitted');
            //                break;
            //            case 'wj-hide-create':
            //                break;
            //        }
            //    });
            //});

            theGrid.cellEditEnding.addHandler(function (s, e) {
                var col = s.columns[e.col];
                if (col.binding == 'Price') {
                    var value = wijmo.changeType(s.activeEditor.value, wijmo.DataType.Number, col.format);
                    if (!wijmo.isNumber(value) || value < 0) { // prevent negative sales/expenses
                        e.cancel = true;
                    } else {
                        dlgChange.show(true, function (sender) {
                            switch (sender.dialogResult) {
                                case 'submit':
                                    alert('form submitted');
                                    break;
                                case 'wj-hide-create':
                                    break;
                            }
                        });
                    }
                } else if (col.binding == 'ShippingDate') {
                    //var value1 = theGrid.cells.getCellData(e.row, e.col, true);
                    var value1 = theGrid.activeEditor.value;
                    //var value1 = wijmo.changeType(s.activeEditor.value, wijmo.DataType.isDate, col.format);
                    //var value = theGrid.cells.getCellData(e.row, e.col, true)
                    //var value = wijmo.changeType(getDateValue, wijmo.DataType.isDate, col.format);
                    //if (!wijmo.isDate(value1)) {
                    if (!value1.match(/^\d{4}\/\d{1,2}\/\d{1,2}$/)) {
                        e.cancel = true;
                    } else {
                        dlgChange.show(true, function (sender) {
                            switch (sender.dialogResult) {
                                case 'submit':
                                    alert('form submitted');
                                    break;
                                case 'wj-hide-create':
                                    break;
                            }
                        });
                    }
                }
            });

            document.getElementById('btnSearchHachu').addEventListener('click', function () {
                loadMasterData();

                dlgMasterSearch.show(true, function (sender) {
                    if (sender.dialogResult == 'wj-hide-ok') {
                        document.getElementById('Text1').setAttribute('value', masterSelected.code);
                    }
                });
            });

            document.getElementById('btnSearchCumpasid').addEventListener('click', function () {
                loadMasterData();

                dlgMasterSearch.show(true, function (sender) {
                    if (sender.dialogResult == 'wj-hide-ok') {
                        document.getElementById('Text4').setAttribute('value', masterSelected.code);
                        document.getElementById('Text5').setAttribute('value', masterSelected.name);
                    }
                });
            });

            var dlgPartsSelect = wijmo.Control.getControl('#dlgPartsSearch');
            document.getElementById('txtCumpasId').addEventListener('focusout', function () {
                dlgPartsSelect.show(true, function (sender) {
                    switch (sender.dialogResult) {
                        case 'submit':
                            alert('form submitted');
                            break;
                        case 'wj-hide-create':
                            break;
                    }
                });
            });

            // グリッドヘッダ
            theGrid.allowMerging = wijmo.grid.AllowMerging.ColumnHeaders;

            // add extra header row to the grid
            var panel = theGrid.columnHeaders;
            panel.rows[0].allowMerging = true;

            // populate the extra header row
            for (col = 8; col <= 9; col++) {
                panel.setCellData(0, col, '表面処理');
            }

            //部品リスト
            //var thePartsList = wijmo.Control.getControl('#cmbPartsList');
            //var templatePartsList = '<table><tr>' +
            //    '<td>{Code}</td>' +
            //    '<td title="Name">　{Name}</td>' +
            //    '</tr></table>';
            //thePartsList.formatItem.addHandler(function (s, e) {
            //    var html = wijmo.format(templatePartsList, e.data);
            //    e.item.innerHTML = html;
            //});
            //thePartsList.selectedIndexChanged.addHandler(function (s, e) {
            //    setText('selectedPartsListName', s.selectedItem.Name);
            //});
            //お客様担当者
            var theDesignManList = wijmo.Control.getControl('#cmbDesignManList');
            var templateDesignManListt = '<table><tr>' +
                '<td>{Code}</td>' +
                '<td title="Name">　{Name}</td>' +
                '</tr></table>';
            theDesignManList.formatItem.addHandler(function (s, e) {
                var html = wijmo.format(templateDesignManListt, e.data);
                e.item.innerHTML = html;
            });
            //発注担当者リスト
            var theOrderManList = wijmo.Control.getControl('#cmbOrderManList');
            var templateOrderManList = '<table><tr>' +
                '<td>{Code}</td>' +
                '<td title="Name">　{Name}</td>' +
                '</tr></table>';
            theOrderManList.formatItem.addHandler(function (s, e) {
                var html = wijmo.format(templateOrderManList, e.data);
                e.item.innerHTML = html;
            });
            //theOrderManList.selectedIndexChanged.addHandler(function (s, e) {
            //    setText('selectedOrderManListName', s.selectedItem.Name);
            //});
            //共通設定処理
            function setText(id, value) {
                document.getElementById(id).value = value;
            }

            // 部品選択画面(F2)
            var dlgPartsSearch = wijmo.Control.getControl('#dlgPartsSearch');
            document.getElementById('flexgrid').addEventListener('keydown', function (e) {
                if (e.keyCode == 113) {
                    //loadbtnPartsData();
                    dlgPartsSearch.show(true, function (sender) {
                        switch (sender.dialogResult) {
                            case 'submit':
                                alert('form submitted');
                                break;
                            case 'wj-hide-create':
                                break;
                        }
                    });
                }
            });
        });
    </script>
}