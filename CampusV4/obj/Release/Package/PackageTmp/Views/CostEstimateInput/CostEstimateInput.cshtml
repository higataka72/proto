@model CampusV4.Models.CostEstimateInputViewModel
<div>
    <div class="page-title">
        <ol class="breadcrumb">
            @if (Model.Mode == "0")
            {
                @* メニューより遷移 *@
                <li class="active">原価見積依頼入力</li>
            }
            else
            {
                @* 引合別原価見積一覧より遷移 *@
                <li><a href="/InquiryCostEstimate/Index">引合別原価見積一覧 <i class="fa fa-arrow-circle-left"></i></a></li>
                <li class="active">原価見積依頼入力</li>
            }
        </ol>
    </div>
    <div class="clearfix"></div>
    <div class="row">
        <div class="col-md-12">
            <div class="x_panel">
                @using (Html.BeginForm("CostEstimateInput", "CostEstimateInput", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_EstimateNo" for="Text1">見積依頼番号</label>
                        <div class="col-md-2">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.EstimateNo, new { @id = "EstimateNo", @class = "form-control" })
                                <span class="input-group-btn">
                                    <button type="button" class="btn btn-info" id="btnSearchJuchu"><i class="fa fa-search"></i></button>
                                </span>
                            </div>
                        </div>
                        <div class="col-md-1">
                            <input type="submit" value="表示" name="submitBtn" class="btn btn-primary" style="display:none;" id="ShowSubmitBtn" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_InquiryNo" for="Text1">引合番号</label>
                        <div class="col-md-1">
                            @Html.TextBoxFor(model => model.InquiryNo, new { @class = "form-control", @placeholder = "(必須)", @id = "txtInquiryNo" })
                        </div>
                        <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_ClassificationCode" for="Select1">分類記号</label>
                        <div class="col-md-1">
                            @(Html.C1().AutoComplete().Id("cmbClassificationCode")
                            .Bind(Model.ClassificationDataList)
                            .DisplayMemberPath("ClassificationCode")
                            .HeaderPath("ClassificationCode")
                            .SearchMemberPath("ClassificationCode, ClassificationSymbolName")
                            .SelectedValuePath("ClassificationCode")
                            .SelectedValue(Model.ClassificationSymbol)
                            .Placeholder("(必須)"))
                        </div>
                        <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_SerialNo" for="Text2">製番</label>
                        <div class="col-md-2">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.SerialNo, new { @id = "SerialNo", @class = "form-control" })
                                <span class="input-group-btn">
                                    <button type="button" class="btn btn-info" id="btnSearchJuchu"><i class="fa fa-search"></i></button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-1 control-label text-nowrap" id="lbl_cmbHinsyuCode" for="Select1">品種</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(model => model.HinsyuCode, new { @class = "form-control", @disabled = "true" })
                            @*@(Html.C1().AutoComplete().Id("cmbHinsyuCode")
                    .Bind(Model.HinsyuDataList)
                    .DisplayMemberPath("HinsyuCode")
                    .HeaderPath("HinsyuCode")
                    .SearchMemberPath("HinsyuCode, Hinmei")
                    .SelectedValuePath("Hinmei")
                    .SelectedValue(Model.Hinmei))*@
                        </div>
                        <label class="col-md-1 control-label text-nowrap" id="lbl_Hinmei" for="Text8">品名</label>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.Hinmei, new { @id = "selectedHinmei", @class = "form-control", @disabled = "true" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-1 control-label  text-nowrap" id="lbl_Subject" for="Text3">件名</label>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.Subject, new { @class = "form-control", @disabled = "true" })
                        </div>
                        <div class="col-md-1">
                            <label class="control-label text-nowrap lavel-functionkey" id="lbl_Release">
                                @Html.CheckBoxFor(model => model.Release)　公開
                            </label>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_DesignPersonCode" for="Select2">設計担当者</label>
                        <div class="col-md-2">
                            @(Html.C1().AutoComplete().Id("cmbDesignPersonCode")
                                .Bind(Model.DesignPersonDataList)
                                .DisplayMemberPath("DesignPersonCode")
                                .HeaderPath("DesignPersonCode")
                                .SearchMemberPath("DesignPersonCode, DesignPersonName")
                                .SelectedValuePath("DesignPersonName")
                                .SelectedValue(Model.DesignPersonName)
                                .Placeholder("(必須)"))
                        </div>
                        <div class="col-md-2">
                            @Html.TextBoxFor(model => model.DesignPersonName, new { @id = "selectedDesignPersonName", @class = "form-control", @disabled = "true" })
                        </div>
                        @*<label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_TestAssemblyPersonCode" for="Select3">検査組立担当者</label>
                <div class="col-md-2">
                    @(Html.C1().AutoComplete().Id("cmbTestAssemblyPersonCode")
                        .Bind(Model.TestAssemblyPersonDataList)
                        .DisplayMemberPath("TestAssemblyPersonCode")
                        .HeaderPath("TestAssemblyPersonCode")
                        .SearchMemberPath("TestAssemblyPersonCode, TestAssemblyPersonName")
                        .SelectedValuePath("TestAssemblyPersonName")
                        .SelectedValue(Model.TestAssemblyPersonName)
                        .Placeholder("(必須)"))
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.TestAssemblyPersonName, new { @id = "selectedTestAssemblyPersonName", @class = "form-control", @disabled = "true" })
                </div>*@
                    </div>
                    <div class="form-group">
                        <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_RequestedDate" for="Text4">依頼日</label>
                        <div class="col-md-2">
                            @Html.C1().InputDate().Id("Text4").Value(Model.RequestedDate).Placeholder("(必須)")
                        </div>
                        <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_DeliveryDate" for="Text5">納入希望日</label>
                        <div class="col-md-2">
                            @Html.C1().InputDate().Id("Text5").Value(Model.DeliveryDate).Placeholder("(必須)")
                        </div>
                        <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_EstimateAnswerDate" for="Text6">見積回答希望日</label>
                        <div class="col-md-2">
                            @Html.C1().InputDate().Id("Text6").Value(Model.EstimateAnswerDate).Placeholder("(必須)")
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-1 control-label"> </label>
                        <div class="col-md-7">
                            <label class="control-label" for="Text7" style="text-align:left;">
                                @Html.RadioButtonFor(model => model.EstimateType, 1, new { @id = "EstimateType1" }) 概算または出図前見積依頼　
                                @Html.RadioButtonFor(model => model.EstimateType, 2, new { @id = "EstimateType2" }) 正式見積依頼　
                            </label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-1 control-label"> </label>
                        <div class="col-md-11">
                            <div class="col-md-1">
                                <label class="control-label" for="Text8" style="text-align:left;">
                                    &emsp;@Html.RadioButtonFor(model => model.ProcessingType, 1, new { @id = "ProcessingType1" }) 型一式　
                                </label>
                            </div>
                            <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_OderDate1" for="Text9">発注予定日</label>
                            <div class="col-md-2">
                                @Html.C1().InputDate().Id("Text9_3").Value(Model.DrawingScheduleDate)
                            </div>
                            <div class="col-md-1">
                                <label class="control-label" for="Text8" style="text-align:left;">
                                    @Html.RadioButtonFor(model => model.ProcessingType, 2, new { @id = "ProcessingType2" }) 一次加工　
                                </label>
                            </div>
                            <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_DrawingScheduleDate" for="Text9">出図予定日</label>
                            <div class="col-md-2">
                                @Html.C1().InputDate().Id("Text9").Value(Model.DrawingScheduleDate)
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-1 control-label"> </label>
                        <div class="col-md-11">
                            <div class="col-md-1">
                                <label class="control-label" for="Text9_1" style="text-align:left;">
                                    &emsp;@Html.RadioButtonFor(model => model.ProcessingType, 3, new { @id = "ProcessingType3" }) パーツ　
                                </label>
                            </div>
                            <label class="col-md-3 control-label text-nowrap lavel-functionkey" id="lbl_OderDate1" for="Text99">&emsp;&emsp;</label>
                            <div class="col-md-1">
                                @Html.RadioButtonFor(model => model.ProcessingType, 4, new { @id = "ProcessingType4" }) 二次加工　
                            </div>
                            <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_DrawingScheduleDate2" for="Text10">一次加工品出荷日</label>
                            <div class="col-md-2">
                                @Html.C1().InputDate().Id("Text10").Value(Model.DrawingScheduleDate2)
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-1 control-label"> </label>
                        <div class="col-md-6">
                            <label class="col-md-1 control-label" for="Text17"  style="text-align:left;">
                                &emsp;@Html.RadioButtonFor(model => model.ProcessingType, 5, new { @id = "ProcessingType5" })
                            </label>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.ProcessingTypeName, new { @id = "ProcessingTypeName", @class = "form-control"})
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-1 control-label text-nowrap" id="lbl_ContentValue" for="Text12">備考</label>
                        <div class="col-md-4">
                            @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", @style = "height:100px;" })
                        </div>
                        <label class="col-md-1 control-label text-nowrap lavel-functionkey" id="lbl_FileName" for="Text13">依頼資料添付</label>
                        <div class="col-md-4">
                            <div class="dropzone dz-clickable" id="myDrop">
                                <div class="dz-default dz-message" data-dz-message="">
                                    <span>ファイルをドラッグ＆ドロップしてしてください。<br>またはここをクリック(タップ)して選択してください。</span>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="form-group">

                    </div>

                    <div class="form-group">
                        @(Html.C1().FlexGrid()
                    .AutoGenerateColumns(false).IsReadOnly(false).Height("250px").Id("flexgrid").AllowAddNew(true)
                    .Bind(Model.GridDataList)
                    .Columns(b1 =>
                    {
                        b1.Add(cb => cb.Binding("RowNumber").Width("50").Header("行").WordWrap(true).DataType(DataType.Number).IsReadOnly(true));
                        b1.Add(cb => cb.Binding("No").Width("50").Header("No.").WordWrap(true).DataType(DataType.Number).IsReadOnly(true));
                        b1.Add(cb => cb.Binding("PartsCode").Width("150").Header("部品分類").WordWrap(true));
                        b1.Add(cb => cb.Binding("PartsName").Width("250").Header("部品名").WordWrap(true));
                        b1.Add(cb => cb.Binding("DrawingNumber").Width("150").Header("図面番号/型式").WordWrap(true));
                        b1.Add(cb => cb.Binding("IriSu").Width("80").Header("入数").WordWrap(true).DataType(DataType.Number));
                        b1.Add(cb => cb.Binding("Kosu").Width("80").Header("個数").WordWrap(true).DataType(DataType.Number));
                        b1.Add(cb => cb.Binding("Tani").Width("80").Header("単位").WordWrap(true));
                        b1.Add(cb => cb.Binding("SurfaceCode").Width("120").Header("表面処理コード").WordWrap(true));
                        b1.Add(cb => cb.Binding("SurfaceProcess").Width("200").Header("表面処理").WordWrap(true));
                    }))
                    </div>

                    <div class="ln_solid"></div>
                    <div class="form-group">
                        <div class="col-md-10" style="text-align: right">
                            @*<a href="#" class="btn btn-primary" id="btnFactorySelection">工場検索</a>*@
                            <a href="/CostEstimateInput/FactorySelection" class="btn btn-primary">工場検索</a>
                            <a href="#" class="btn btn-primary" id="btnPatrsSelection" style="display:none;">部品選択</a>
                            <a href="#" class="btn btn-primary" id="btnInspectionDetail">メール送信</a>
                            <a href="#" class="btn btn-primary" id="btnInsert">登録</a>
                        </div>
                        <div class="col-md-1" style="text-align: right"></div>
                        <div class="col-md-1" style="text-align: right"></div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* 処理終了後のメッセージ表示 *@
<div id="dialog" style="width: 600px; height: 200px;">
    <div class="wj-dialog-header">
        @Html.Raw("メッセージ")
    </div>
    <div class="wj-dialog-body">
        <p>
            @Html.Raw("登録が完了しました")
        </p>
    </div>
    <div class="wj-dialog-footer">
        <button class="btn btn-default wj-hide-ok">OK</button>
    </div>
</div>

@Html.C1().Popup("#dialog")
@*@Html.Partial("FactorySelection")*@
@Html.Partial("PartsSelectList", Model)

@section scripts{
    <script>
        c1.documentReady(function () {
            // ラベルツールチップ設定
            var tt = new wijmo.Tooltip();
            tt.setTooltip('#lbl_EstimateNo', '見積依頼番号<br><b>F2:検索 F5:クリア F9:終了</b>');
            tt.setTooltip('#lbl_InquiryNo', '受注番号<br><b>F1:削除 F5:クリア</b>');
            tt.setTooltip('#lbl_ClassificationCode', '分類記号<br><b>F2:検索 F5:クリア</b>');
            tt.setTooltip('#lbl_SerialNo', '製番<br><b>F2:検索 F5:クリア</b>');
            tt.setTooltip('#lbl_cmbHinsyuCode', '品種');
            tt.setTooltip('#lbl_Hinmei', '品名');
            tt.setTooltip('#lbl_Subject', '件名');
            tt.setTooltip('#lbl_Release', '公開');
            tt.setTooltip('#lbl_DesignPersonCode', '設計担当者<br><b>F2:検索</b>');
            /*tt.setTooltip('#lbl_TestAssemblyPersonCode', '検査組立担当者<br><b>F2:検索</b>');*/
            tt.setTooltip('#lbl_RequestedDate', '依頼日');
            tt.setTooltip('#lbl_DeliveryDate', '納入希望日');
            tt.setTooltip('#lbl_EstimateAnswerDate', '見積回答希望日');
            tt.setTooltip('#EstimateType1', '概算または出図前見積依頼');
            tt.setTooltip('#EstimateType2', '正式見積依頼');
            tt.setTooltip('#ProcessingType1', '型一式');
            tt.setTooltip('#lbl_OderDate1', '発注予定日');
            tt.setTooltip('#ProcessingType2', '一次加工');
            tt.setTooltip('#lbl_DrawingScheduleDate', '出図予定日');
            tt.setTooltip('#ProcessingType3', 'パーツ');
            tt.setTooltip('#ProcessingType4', '二次加工');
            tt.setTooltip('#lbl_DrawingScheduleDate2', '一次加工品出荷日');
            tt.setTooltip('#ProcessingType5', 'その他');

            tt.setTooltip('#lbl_ContentValue', '備考');
            tt.setTooltip('#lbl_FileName', '依頼資料添付<br><b>F10:参照</b>');

            // 分類記号
            var cmbClassificationCode = wijmo.Control.getControl('#cmbClassificationCode');
            cmbClassificationCode.selectedIndexChanged.addHandler(function (s, e) {
                //var ShowSubmitBtnObj = document.getElementById('ShowSubmitBtn');
                //ShowSubmitBtnObj.click();
            });
        });

        // ファイル添付（ドロップ対応）
        Dropzone.autoDiscover = false;
        var myDropzone = new Dropzone("div#myDrop", {
            addRemoveLinks: true,
            dictCancelUpload: "キャンセル",
            dictCancelUploadConfirmation: "本当にアップロードしたファイルをキャンセルしますか？",
            dictRemoveFile: "削除",
            url: "/CostEstimateInput/FileUpload",
            removedfile: function (file) {
                var name = file.name;
                $.ajax({
                    type: 'POST',
                    url: "/CostEstimateInput/FileDelete",
                    data: { name: name },
                    success: function (data) {
                        console.log(data);
                    }
                });
                file.previewElement.remove();
            }
        });

        // 製番展開
        var ObjSeiban = document.getElementById('txtProductionNumber');


        // 分類記号
        var theClassificationCode = wijmo.Control.getControl('#cmbClassificationCode');
        var template = '<table><tr>' +
            '<td>{ClassificationCode}</td>' +
            '<td title="ClassificationSymbolName">　{ClassificationSymbolName}</td>' +
            '</tr></table>';
        theClassificationCode.formatItem.addHandler(function (s, e) {
            var html = wijmo.format(template, e.data);
            e.item.innerHTML = html;
        });

        // 品種
        //var theHinsyuCode = wijmo.Control.getControl('#cmbHinsyuCode');
        //var template1 = '<table><tr>' +
        //    '<td>{HinsyuCode}</td>' +
        //    '<td title="HINMEI">　{Hinmei}</td>' +
        //    '</tr></table>';
        //theHinsyuCode.formatItem.addHandler(function (s, e) {
        //    var html = wijmo.format(template1, e.data);
        //    e.item.innerHTML = html;
        //});
        //theHinsyuCode.selectedIndexChanged.addHandler(function (s, e) {
        //    setSelectedHinmei(s);
        //});
        //function setSelectedHinmei(s) {
        //    setText('selectedHinmei', s.selectedValue);
        //}

        // 設計担当者
        var theDesignPersonCode = wijmo.Control.getControl('#cmbDesignPersonCode');
        var template2 = '<table><tr>' +
            '<td>{DesignPersonCode}</td>' +
            '<td title="DesignPersonName">　{DesignPersonName}</td>' +
            '</tr></table>';
        theDesignPersonCode.formatItem.addHandler(function (s, e) {
            var html = wijmo.format(template2, e.data);
            e.item.innerHTML = html;
        });
        theDesignPersonCode.selectedIndexChanged.addHandler(function (s, e) {
            setSelectedDesignPersonName(s);
        });
        function setSelectedDesignPersonName(s) {
            setText('selectedDesignPersonName', s.selectedValue);
        }

        // 検査組立担当者
        //var theTestAssemblyPersonCode = wijmo.Control.getControl('#cmbTestAssemblyPersonCode');
        //var template3 = '<table><tr>' +
        //    '<td>{TestAssemblyPersonCode}</td>' +
        //    '<td title="TestAssemblyPersonName">　{TestAssemblyPersonName}</td>' +
        //    '</tr></table>';
        //theTestAssemblyPersonCode.formatItem.addHandler(function (s, e) {
        //    var html = wijmo.format(template3, e.data);
        //    e.item.innerHTML = html;
        //});
        //theTestAssemblyPersonCode.selectedIndexChanged.addHandler(function (s, e) {
        //    setSelectedTestAssemblyPersonName(s);
        //});
        //function setSelectedTestAssemblyPersonName(s) {
        //    setText('selectedTestAssemblyPersonName', s.selectedValue);
        //}

        function setText(id, value) {
            document.getElementById(id).value = value;
        }

        // 工場選択画面
        //var dlgFactorySelection = wijmo.Control.getControl('#dlgFactorySelection');
        //document.getElementById('btnFactorySelection').addEventListener('click', function () {
        //    loadPartnerData();
        //    loadGrovalData();
        //    dlgFactorySelection.show(true, function (sender) {
        //        switch (sender.dialogResult) {
        //            case 'submit':
        //                alert('form submitted');
        //                break;
        //            case 'wj-hide-create':
        //                break;
        //        }
        //    });
        //});

        // 部品選択画面
        var dlgPartsSearch = wijmo.Control.getControl('#dlgPartsSearch');
        document.getElementById('btnPatrsSelection').addEventListener('click', function () {
            //loadbtnPartsData();
            dlgPartsSearch.show(true, function (sender) {
                switch (sender.dialogResult) {
                    case 'submit':
                        alert('form submitted');
                        break;
                    case 'wj-hide-create':
                        break;
                }
            });
        });
        // 部品選択画面(ダブルクリック)
        var grid = wijmo.Control.getControl('#flexgrid');
        grid.hostElement.addEventListener('dblclick', function (e) {
            //loadbtnPartsData();
            dlgPartsSearch.show(true, function (sender) {
                switch (sender.dialogResult) {
                    case 'submit':
                        alert('form submitted');
                        break;
                    case 'wj-hide-create':
                        break;
                }
            });
        });
        // 部品選択画面(F2)
        document.getElementById('flexgrid').addEventListener('keydown', function (e) {
            if (e.keyCode == 113) {
                //loadbtnPartsData();
                dlgPartsSearch.show(true, function (sender) {
                    switch (sender.dialogResult) {
                        case 'submit':
                            alert('form submitted');
                            break;
                        case 'wj-hide-create':
                            break;
                    }
                });
            }
        });

        //引合番号イベント
        var ObjInquiryNo = document.getElementById('txtInquiryNo');
        //フォーカスアウト(bur)
        ObjInquiryNo.addEventListener('blur', InquiryFocusin_event);
        function InquiryFocusin_event(e) {
            this.value = this.value.toString().padStart(9, '0')
        }

        //製番イベント
        var ObjSeiban = document.getElementById('SerialNo');
        // 部品リスト表示（製番Enter)
        ObjSeiban.addEventListener('keypress', SeibanEnter_event);
        function SeibanEnter_event(e) {
            if (e.keyCode === 13) {
                var ShowSubmitBtnObj = document.getElementById('ShowSubmitBtn');
                ShowSubmitBtnObj.click();
            }
            return false;
        };

        //フォーカスイン
        ObjSeiban.addEventListener('focusin', SeibanFocusin_event);
        function SeibanFocusin_event(e) {
            if (this.value == '') {
                var ObjtxtInquiryNoValue = document.getElementById('txtInquiryNo').value;
                var ObjGroupingMarkCodeValue = wijmo.Control.getControl('#cmbClassificationCode').selectedValue;
                if (ObjGroupingMarkCodeValue == null || ObjGroupingMarkCodeValue == '') {
                    this.value = ObjtxtInquiryNoValue
                } else {
                    this.value = ObjtxtInquiryNoValue + ObjGroupingMarkCodeValue;
                }

            } else {
                this.selectionStart = this.selectionEnd;
            }
        };

        // 完了メッセージ
        var dialog = wijmo.Control.getControl('#dialog');
        document.getElementById('btnInsert').addEventListener('click', function (e) {
            // show the dialog (modal window)
            dialog.show(true, function (sender) { });
        });

        // 部品リストを取得
        function getCostEstimateData() {
            $.ajax({
                type: "POST",
                url: "/CostEstimateInput/GetCostEstimateData",
                dataType: "json",
                success: function (result) {
                    var fg = wijmo.Control.getControl("#flexgrid");
                    var data = JSON.parse(result);
                    fg.rows.clear();
                    var j = 0
                    for (var i in data) {
                        var obj = [data[i].RowNumber, data[i].No, data[i].PartsCode, data[i].PartsName, data[i].DrawingNumber, data[i].IriSu, data[i].Kosu, data[i].Tani, data[i].SurfaceCode, data[i].SurfaceProcess];
                        // FlexGridに新規行を追加します。
                        var row = new wijmo.grid.Row();
                        fg.rows.push(row);
                        for (var col = 0; col <= fg.columns.length - 1; col++) {
                            //FlexGrid のセルにデータを入力します。
                            fg.setCellData(j, col, obj[col]);
                        }
                        j++;
                    }
                    var row = new wijmo.grid.Row();
                    fg.rows.push(row);
                }
            });
        }

    </script>
}